---
components:
  schemas:
#Criar, atualizar, ver , apagar uma tarefa
    tarefa:
      properties:
        dataVencimento:
          description: A data de vencimento da tarefa (ISO 8601).
          format: date-time
          type: string
        descrição:
          description: A descrição da tarefa.
          maxLength: 200
          minLength: 10
          type: string
        estado:
          description: O estado da tarefa (concluído, em progresso ou futuro).
          enum:
            - concluido
            - Hoje
            - Agendado
          type: string
        prioridade:
          description: A prioridade da tarefa (de 0 a 20).
          maximum: 20
          minimum: 0
          type: integer
        tarefaId:
          description: O ID da tarefa.
          format: uuid
          type: string
        título:
          description: O título da tarefa.
          minLength: 1
          type: string
        userId:
          description: O ID do usuário associado à tarefa.
          format: uuid
          type: string
      required:
        - userId
        - tarefaId
        - título
        - descrição
        - dataVencimento
        - estado
        - prioridade
      example:
        tarefaId: 550e8400-e29b-41d4-a716-446655440044
        userId: 550e8400-e29b-41d4-a716-446655440077
        título: Concluir Relatório Mensal
        descrição: Escrever um relatório sobre o desempenho mensal da equipe
        dataVencimento: 2023-11-30
        prioridade: 15
        estado: concluido 

#Criar, editar e listar uma tarefa Padrao
    tarefasPadrao:
      items:
        properties:
          dataVencimento:
            description: A data de vencimento da tarefa (ISO 8601).
            format: date
            type: string
          descrição:
            description: A descrição da tarefa.
            maxLength: 200
            minLength: 10
            type: string
          estado:
            description: O estado da tarefa (concluído, em progresso ou futuro).
            enum: ["concluido", "Hoje", "Agendado"]
            type: string
          prioridade:
            description: A prioridade da tarefa (de 0 a 20).
            maximum: 20
            minimum: 0
            pattern: ^[0-9]+$
            type: integer
          tarefaId:
            format: uuid
            pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
            type: string
          título:
            description: O título da tarefa.
            maxLength: 30
            minLength: 4
            type: string
        required:
          - tarefaId
          - título
          - descrição
          - estado
          - dataVencimento
          - prioridade
      example:
        tarefaId: 550e8400-e29b-41d4-a726-446655440044
        título: Terminar Relatorio
        descrição: Corrigir relatório sobre o desempenho mensal
        dataVencimento: 2023-11-30
        prioridade: 19
        estado: Hoje   

#Associar uma tarefa a um User
    tarefasUser:
      properties:
        userId:
          $ref: "#/components/schemas/User"
        tarefasId:
          $ref: "#/components/schemas/tarefa"
      required:
        - userId
        - tarefasId
      example:
        userId: 550e5400-e29b-41d4-a726-446655440044
        tarefas:
          tarefaId: 550e8400-e29b-41d4-a726-446655440044

#User - criar editar eliminar
    User:
      required:
      - email
      - password
      type: object
      properties:
        nome:
          type: string
        apelido:
          type: string
        email:
          pattern: '[^@ \t\r\n]+@[^@ \t\r\n]+[^@ \t\r\n]+'
          type: string
        password:
          type: string
        contacto:
          pattern: 9[0-9]{2}[0-9]{3}[0-9]{3}$
          type: string
      example:
        password: password
        contacto: 912345678
        apelido: apelido
        nome: nome
        email: email@hotmail.com
    Login:
      required:
      - email
      - password
      type: object
      properties:
        email:
          pattern: '[^@ \t\r\n]+@[^@ \t\r\n]+[^@ \t\r\n]+'
          type: string
        password:
          type: string  
      example:
        email: email@hotmail.com~
        password: password

#Segurança
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

#v v v v v v v v v v v v v v v v v v v v v v v v v  v v v v v v v
info:
  title: API De Gestão De Tarefas  ToDo*
  version: "1.0"
openapi: 3.0.2
paths:
  /tarefas{tarefaId}:
    #Apargar uma tarefa apartir do seu ID
    delete:
      tags:
      - Tarefas
      description: Excluir uma tarefa existente apartir do ID.
      parameters:
        - in: path
          name: tarefaId
          required: true
          schema:
            format: uuid
            type: string
        - in: header
          name: Authorization
          required: true
          description: Bearer token for authentication
          schema:
            type: string    
        - in: header
          name: Content-Type
          required: true
          description: Media type of the request payload
          schema:
            type: string
            default: application/json
        - in: header
          name: Accept
          required: true
          description: Media type that the client expects in the response
          schema:
            type: string
            default: application/json    
      responses:
        "204":
          description: Tarefa excluída com sucesso.
        "404":
          description: Tarefa não encontrada.
        "500":
          description: Erro interno do servidor.
      summary: Excluir uma tarefa existente
      security:
        - BearerAuth: []
          

    #Listar uma tarefa apartir do seu ID  
    get:
      tags:
      - Tarefas
      description: Obter informações detalhadas sobre uma tarefa apartir do ID.
      parameters:
        - in: path
          name: tarefaId
          required: true
          schema:
            format: uuid
            type: string
        - in: header
          name: Authorization
          required: true
          description: Bearer token for authentication
          schema:
            type: string    
        - in: header
          name: Content-Type
          required: true
          description: Media type of the request payload
          schema:
            type: string
            default: application/json
        - in: header
          name: Accept
          required: true
          description: Media type that the client expects in the response
          schema:
            type: string
            default: application/json     
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tarefa"
          description: Informações detalhadas sobre a tarefa.
        "404":
          description: Tarefa não encontrada.
        "500":
          description: Erro interno do servidor.
      summary: Obter informações sobre uma tarefa
      security:
        - BearerAuth: []

    #Atualizar uma tarefa apartir do seu Id 
    put:
      tags:
      - Tarefas
      description: Endpoint para atualizar uma tarefa existente.
      parameters:
        - in: path
          name: tarefaId
          required: true
          schema:
            format: uuid
            type: string
        - in: header
          name: Authorization
          required: true
          description: Bearer token for authentication
          schema:
            type: string    
        - in: header
          name: Content-Type
          required: true
          description: Media type of the request payload
          schema:
            type: string
            default: application/json
        - in: header
          name: Accept
          required: true
          description: Media type that the client expects in the response
          schema:
            type: string
            default: application/json     
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tarefa"
          description: Atualizar uma tarefa apartir do ID
        "400":
          description: Requisição inválida. Verifique os parâmetros de entrada.
        "404":
          description: Tarefa não encontrada.
        "500":
          description: Erro interno do servidor.
      summary: Atualizar uma tarefa existente  
      security:
        - BearerAuth: []

  /tarefa:
    #Criar uma tarefa
    post:
      tags:
      - Tarefas
      description: Endpoint para criar uma nova tarefa.
      parameters:
        - in: header
          name: Authorization
          required: true
          description: Bearer token for authentication
          schema:
            type: string    
        - in: header
          name: Content-Type
          required: true
          description: Media type of the request payload
          schema:
            type: string
            default: application/json
        - in: header
          name: Accept
          required: true
          description: Media type that the client expects in the response
          schema:
            type: string
            default: application/json 
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/tarefa"
        required: true
      responses:
        "201":
          description: Tarefa criada com sucesso.
        "400":
          description: Requisição inválida. Verifique os parâmetros de entrada.
        "500":
          description: Erro interno do servidor.
      summary: Criar uma nova tarefa
      security:
        - BearerAuth: []

  /listartarefasPadrao:
    #Listar Tarefas Predefinidas na App
    get:
      tags:
      - Tarefas Padrão
      summary: Get a list of predefined tasks
      description: Returns all registered tasks
      parameters:
        - in: header
          name: Authorization
          required: true
          description: Bearer token for authentication
          schema:
            type: string    
        - in: header
          name: Content-Type
          required: true
          description: Media type of the request payload
          schema:
            type: string
            default: application/json
        - in: header
          name: Accept
          required: true
          description: Media type that the client expects in the response
          schema:
            type: string
            default: application/json 
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type:
                $ref: "#/components/schemas/tarefasPadrao"
        "404":
          description: No tasks found
      security:
        - BearerAuth: []

  /api/tarefasUsers{UserId}:
    #Associar uma tarefa a um User      
    post:
      tags:
      - Tarefas Padrão
      description: Endpoint para adicionar uma tarefa padrao a um User.
      parameters:
        - in: header
          name: Authorization
          required: true
          description: Bearer token for authentication
          schema:
            type: string    
        - in: header
          name: Content-Type
          required: true
          description: Media type of the request payload
          schema:
            type: string
            default: application/json
        - in: header
          name: Accept
          required: true
          description: Media type that the client expects in the response
          schema:
            type: string
            default: application/json 
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/tarefasPadrao"
        required: true
      responses:
        "201":
          description: Tarefa criada com sucesso.
        "400":
          description: Requisição inválida. Verifique os parâmetros de entrada.
        "500":
          description: Erro interno do servidor.
      summary: Criar uma nova tarefa
      security:
        - BearerAuth: []
      
  /User:
    post:
      tags:
      - User
      summary: Criar User
      description: Criação de um novo User
      parameters: 
        - in: header
          name: Content-Type
          required: true
          description: Media type of the request payload
          schema:
            type: string
            default: application/json
        - in: header
          name: Accept
          required: true
          description: Media type that the client expects in the response
          schema:
            type: string
            default: application/json 
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: User criado com sucesso
        "400":
          description: Erro na criação de um User
  /User/login:
    get:
      tags:
      - User
      summary: Login do User
      operationId: loginUser
      parameters:
      - name: User
        in: query
        description: nome do User
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: palavra passe do User
        required: true
        style: form
        explode: true
        schema:
          type: string 
      responses:
        "200":
          description: Login efetuado com sucesso
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        "400":
          description: User inválido
  /User/logout:
    get:
      security:
        - BearerAuth: []
      tags:
      - User
      summary: Logout do User
      operationId: logoutUser
      responses:
        "200":
          description: Logout efetuado com sucesso
  /User/{email}:
    get:
      security:
        - BearerAuth: []
      tags:
      - User
      summary: Encontrar User
      operationId: getUserByEmail
      parameters:
      - name: email
        in: path
        description: Necessário enviar o email do User pretendido
        
        required: true
        style: simple
        explode: false
        schema:
          type: string

      responses:
        "200":
          description: Enviado User com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: "Input {email} inválido"
        "404":
          description: User não existe
    delete:
      security:
        - BearerAuth: []
      tags:
      - User
      summary: Eliminar User
      description: Só consegue ser realizado por um User logado
      operationId: deleteUser
      parameters:
      - name: email
        in: path
        description: Email necessário
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Elimiado com sucesso
        "400":
          description: "Input {email} inválido"
        "404":
          description: User não encontrado
    patch:
      security:
        - BearerAuth: []
      tags:
      - User
      summary: Updated User
      description: So consegue ser realizado por um User logado
      operationId: updateUser
      parameters:
      - name: email
        in: path
        description: Email do User necessário
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: Atualizado User com sucesso
        "400":
          description: "Input {email} inválido"
        "404":
          description: User não existe      
servers:
  - url: https://localhost:3000/v1
